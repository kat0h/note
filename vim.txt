こんにちは
皆さんはテキストエディタ使っていますか？
使いますよね!?
使ったことないよという人もテキストエディタとは
ウィンドウズのメモ帳と言ったらわかるかもしれません。
これらテキストエディタは
マイクロソフトオフィスのように文字のサイズを変えたり、色をつけたりはしません
ただシンプルに、文字だけの文書を編集するためのソフトです
そんな一見単純に見えるテキストエディタですが、
長年工夫が凝らされ、磨かれ続けています。
人々に愛され使われ続けているとても奥の深いものなのです
テキストエディタは道具です。包丁です。研いでいくとどんどん自分にあったものになっていき、時間は永遠と溶けていきます。
設定を見直してたら1日が終わってしまった。そんな経験をしたことのある方も多いでしょう。
...まぁ私はそこまでは行ってませんがww
そんなテキストエディタの世界を私と覗いて行きましょう
今回の動画で紹介するテキストエディタはVimです。
VimはBramMoolenaar氏によって1991年から開発され続けているテキストエディタです。
このエディタは、その独自の操作性とそれによって生まれる作業効率の高さから多くの人に愛用されてます。
では、Vimエディタの歴史を追っていきましょう。
ですが、Vimエディタは長い歴史があり、さまざまなエディタから、影響を受けているため、情報が正しい確証はないです（予防線）
そもそも、私は現在Vimを好んで使っていますが、3年弱しか使っていませんし、本体にも貢献したことがありません。
Vimのルーツは初期のUNIXから始まります。
edエディター(editorの略)はUNIXのために作られたラインエディターです。
初期のコンピュータは今のように画面に文字を表示するものではなく、テレタイプ端末と言って、電動式のタイプライターを使って、結果を表示してました。
ですから、この頃のエディターはファイルの必要部分のみを表示、編集していく古典的なものでした。
現在のように編集中の様子をプレビューする機能なんてありません。
この後、1976年にBillJoyがed・そしてその改良版であるemのさらに改良版exを開発しました。
このexは基本的にはラインエディタですが、なんとモードの一つとしてVisualモードが搭載されています。
これが現在のスクリーンエディタに繋がっていくわけです。
このスクリーンエディタモードは単体のコマンドとして定義され、viとして使われていくことになります。
さて、このex及びviはunixのために作られたものであったためにそのほかのOSでは使うことができませんでした。
もちろんviの動作を真似て作られたエディタも存在していましたが、再現性は良いものではなかったようです。
そのため、1991年にオランダ人のプログラマーBramMoolenaar氏がAmigaコンピュータ用にviを模倣してvimを開発しました。
初期の頃はVimはVi imitation（viの模倣）として開発されていました。これは、VimがViとの互換性を持っていることから名づけられました。
ですが、さまざまなOS用に移植され、新しい機能が搭載され広まっていくうちにVi Improved(改善されたvi)に名前を改めました。
Vimは最初のリリースから30年近くが経過した今も、Bram氏を中心にほぼ毎日のように新たな機能が追加され、バグの修正など改善され続けています。
さて、Vimの歴史は理解できたでしょうか。
Vimは30年という長い歴史を持ちながらも、日々開発され続けていることがわかりました。
では、Vimはどのようなエディターなのでしょうか。
Vimは基本的に文字だけで表現されるターミナル上で動きます。このことから、遠隔でコンピュータを操作するときに使い勝手がいいものであります。
また、巨大なファイルを開いても重くならないため、サーバなどの管理をする際にも使われるようです。
そして、基本的な操作は全てキーボードだけで完結します。この特徴によって、使うたびにマウスに手を伸ばさず操作できます。
通常のエディタと同じ操作で例示すると、
カーソルの移動
文字の選択
保存
このような感じです。キーボードの操作は、コマンドを覚える必要がありますが、これらのように多彩な操作をできます。
Vimの大きな特徴は、モードのあるエディタであるであるということです。
一般的なテキストエディタは、キーを押せば押したキーの文字が入力されます。
この操作は直感的であり、使い方を覚える必要がないという長所があります。
これに対してモーダルエディタでは、文章の編集における
カーソルの移動・文字の挿入・削除・保存などをモードを切り替えて行います。
これによって、ユーザーは自分のしたいことに集中して作業ができます。
Vimのモードの動きを見ていきましょう。
また、カーソルを文字単位で飛ばしたり、移動することもできます。
慣れると、ファイル内を縦横無尽に駆け回り、自由に編集できるようになります。
Vimの二つ目の大きな特徴・テキストオブジェクトについて解説します。
この機能は、Vimに元々あったものではなく、（多分）2010年代になってから追加されました。
Vimでは英語の文章やプログラムを書くときに特に、モードがあることの恩恵を受けられます。
ここに、適当なプログラムのソースコードがあるのでテキストオブジェクトの効果を見てみましょう。
print文の""内の単語を変更してみましょう。
叩くキーは ci" これだけです。
これにより、カーソルは"内に移動し、文字を削除し、インサートモードに入ります。
この操作は c （削除して挿入モードに入る）i（中を）"（"の）
それぞれにはこのようにたくさんの種類があり、組み合わせることで少ない記憶で、多彩な操作を実現できます。
いくつか例をお見せしましょう。
このようにVimはそのままの状態でも、強力なテキスト編集をできることがわかります。
では、ここからは特にプログラムを書く上でのVimを見ていきましょう。
ただ、私はただの学生ですので、実際の業務をする人が見たら非効率な作業手順をしているかもしれません。あくまで一例としてご覧ください。
設定やプラグインの入っていないVimは、シンタックスハイライトか一部の言語でのみctagを使った補完が効く程度ですが。
Vimのコミュニティーの有志の尽力でここ数年でVimはLspの力を手に入れました。
Lspはマイクロソフトが作った規格なのですが、プログラミング言語の補完などの情報を提供するサーバを一つ作るだけで様々なエディタで利用できる
という、超絶スーパーハイパーヤバイ技術です。
これを使うためのいくつかのプラグインをインストールするとこのようになります。
試しにPythonのファイルを編集してみましょう。
このようにオブジェクトのメソッドも表示できます。
うp主の設定は概要欄に置いておきます。
また、プラグインによって、現代的なVSCodeなどにも負けないIDE的なエディタにもなります。
Vimは30年以上コンピュータとともに育ってきたエディタです。
独自のキーバインドも学習曲線こそ急なものの、とても使いやすく今もVSCodeをはじめとしたエディタに影響を与えています。
今の時代でも、触れてみる価値は十分にあります。
ぜひVim、触ってみてください。
この動画で紹介したのはほんの、ほーんの一部だけです。
Webブラウザで動かせるものもありますよ。
ここまで、ご視聴ありがとうございました。
この動画を気に入ってくれた方、ぜひチャンネル登録、高評価、コメントで殴ってください（懇願）
うp主はTwitterもやってます。フォローしてくださると喜びます。
